<launch>
	<!-- roslaunch arguments -->
	<arg name="show_rviz" default="true"/>
	<arg name="paused" default="false"/>
	<arg name="debug" default="false"/>  
	<arg name="gui" default="false"/>
	<arg name="show_rqt" default="true"/>

	<!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
	<include file="$(find am_gazebo)/launch/lawn0.launch">
		<arg name="paused" value="$(arg paused)" />
		<arg name="debug" value="$(arg debug)" />
		<arg name="gui" value="$(arg gui)" />    
		<arg name="use_sim_time" value="true" />
		<arg name="headless" value="false" />
	</include>

	<!-- urdf xml robot description loaded on the Parameter Server-->
	<param name="robot_description" command="xacro --inorder '$(find am_description)/urdf/automower.urdf.xacro'" />
	
	<!-- push robot_description to factory and spawn robot in gazebo -->
	<node name="automower_spawn" pkg="gazebo_ros" type="spawn_model" output="screen" args="-urdf -param robot_description -model automower -x 0 -y 0 -z 0" />

	<!-- launch rqt gui -->
	<group if="$(arg show_rqt)">	
		<node name="rqt_yaya" pkg="rqt_gui" type="rqt_gui"></node>
	</group>

	<!-- robot visualization in Rviz -->
	<group if="$(arg show_rviz)">
		<node name="rviz" pkg="rviz" type="rviz" output="screen" args="-d $(find am_description)/rviz/pf.rviz"/> 
	</group>

	<!-- load joint controller configurations from YAML file to parameter server -->
	<rosparam file="$(find am_control)/config/joint_position_control.yaml" command="load" />

	<!-- source that publishes the joint positions as a sensor_msgs/JointState -->
	<param name="use_gui" value="false"/>
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

	<!-- publish all the frames to TF -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher">
		<param name="publish_frequency" value="50"/>
	</node>

	<!-- publish the map frame -->
	<node pkg="tf2_ros" type="static_transform_publisher" name="map_broadcaster" args="0 0 0 0 0 0 map odom" />

	<!-- publish processed encoder data -->
	<!-- <node pkg="sensor_decoder" type="de_wheel_encoder" name="encoder_decode" /> -->
 
</launch>
